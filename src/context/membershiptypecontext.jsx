import { createContext, useContext, useState } from "react";
import { 
  getMembershipType, 
  getMembershipsTypes, 
  deleteMembershipTypes, 
  updateMembershipTypes,
  createMembershipType // Importamos la API para crear
} from "../api/membershipType"; 

export const MembershipTypeContext = createContext();

export const useMembershipType = () => {
  const context = useContext(MembershipTypeContext);
  if (!context) {
    throw new Error("useMembershipType debe usarse dentro de un MembershipTypeProvider");
  }
  return context;
};

export const MembershipTypeProvider = ({ children }) => {
  const [membershipType, setMembershipType] = useState([]);

  // Obtener UNA membres√≠a por ID
  const getMshipType = async (id) => {
    try {
      const res = await getMembershipType(id);
      return res.data;
    } catch (error) {
      console.error("Error obteniendo la membres√≠a:", error);
    }
  };

  // Obtener TODAS las membres√≠as
  const getMshipsTypes = async () => {
    try {
      const res = await getMembershipsTypes();
      setMembershipType(res.data);
    } catch (error) {
      console.error("Error obteniendo las membres√≠as:", error);
    }
  };

  // üîÑ Actualizar una membres√≠a
  const updateMshipTypes = async (id, data) => {
    try {
      console.log("üì§ Enviando datos para actualizar:", { id, ...data });
  
      const res = await updateMembershipTypes(id, {
        name: data.name.trim(),
        price: Number(data.price), // üî• Convertimos a n√∫mero
        duration: Number(data.duration), // üî• Convertimos a n√∫mero
      });
  
      if (res.status === 200) {
        console.log("‚úÖ Membres√≠a actualizada correctamente");
        getMshipsTypes(); // üî• Refrescar lista despu√©s de actualizar
      }
    } catch (error) {
      console.error("‚ùå Error actualizando la membres√≠a:", error.response?.data || error);
      alert("‚ùå Hubo un error al actualizar la membres√≠a. Revisa los datos.");
    }
  };

  // Eliminar una membres√≠a
  const deleteMshipTypes = async (id) => {
    try {
      const res = await deleteMembershipTypes(id);
      if (res.status === 200 || res.status === 204) {
        setMembershipType(membershipType.filter(m => m._id !== id));
      }
    } catch (error) {
      console.error("Error eliminando la membres√≠a:", error);
    }
  };

  // ‚ûï Crear una nueva membres√≠a
  const createMshipType = async (data) => {
    try {
      const res = await createMembershipType(data);
      if (res.status === 201) { // C√≥digo 201 = Creado con √©xito
        setMembershipType([...membershipType, res.data]); // Agregar la nueva membres√≠a a la lista
      }
    } catch (error) {
      console.error("Error creando la membres√≠a:", error);
    }
  };

  return (
    <MembershipTypeContext.Provider
      value={{ 
        membershipType, 
        getMshipsTypes, 
        deleteMshipTypes, 
        getMshipType, 
        updateMshipTypes,
        createMshipType // üî• Ahora podemos usarla en la p√°gina
      }}
    >
      {children}
    </MembershipTypeContext.Provider>
  );
};
